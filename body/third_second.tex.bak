% !Mode:: "TeX:UTF-8"

\chapter{基于超像素的Fast Fuzzy C-Means Clustering在图像分割中的应用}
在这项工作中，我们使用一种基于Boruvka算法来产生超像素图像。Boruvka算法具有线性时间解，可并行化。此外，通过Boruvka 算法，邻里信息可以纳入一个统一的框架。在每次迭代之后，特征在新形成的集群中聚合。这种方法比SLIC和LSC等只利用每像素特征来确定聚类隶属关系的方法更为健壮。

在Boruvka算法获得的超像素图像的基础上，通过计算超像素图像的直方图来实现快速FCM算法。由于超像素图像中不同颜色的数目远小于原始彩色图像，因此计算超像素图像的直方图非常容易。最后，以直方图作为目标函数的参数，实现彩色图像的快速分割。我们提出的算法的框架如图1所示。

\section{通过Boruvka算法生成超像素}

把一个图看成有n个树的森林，每个顶点看成一棵树。
对于每棵树来说，我们找到它最近的邻点，即边的权重最小的那个点，并把他们合并在一起。
假设$C_{2}$是$C_{1}$的最小的邻点($C_{1}$也许并不是$C_{2}$最小的邻点)，我们定义两个树之间的距离为：
\begin{equation}\label{eqn:hardassn}
D(C_{1},C_{2}) = \min_{v_{i}\in C_{1},v_{j}\in C_{2},(v_{i},v_{j})\in \varepsilon} \omega ((v_{i},v_{j}))
\end{equation}

最近邻点选择之后，构建辅助图，其中每个顶点表示一个簇，每个边对应一个选定的权重最小的边。如果这里有多个最近的邻点，我们在辅助图上用重复的边来表示他们。另一方面，辅助图上的边是不同的。用深度优先搜索找到连通图。Boruvka算法重复融合树直到只有一棵树留下来。我们用Boruvka算法生成一个最小生成树（MST），同时记录每个边缘的顺序添加到MST。一旦边缘被添加到MST，森林中的树木数量减少一个。假设需要提取k个超像素，我们通过前n -k个边连接顶点，并且具有k个连接的组件，这些组件恰好是超像素。

Boruvka和Kruskal算法之间的主要区别在于前者是局部和并发搜索边缘，而后者在全局范围内对边缘进行排序并按顺序执行。因此，Boruvka算法可以并行处理。此外，Boruvka算法假设簇是均匀分布的，并缓解了Kruskal算法倾向于生成严重不平衡簇的缺点。 在所提出的超像素层次方法中，我们采用Boruvka算法来构造MST。同时，记录每条边加入MST的顺序。一旦将一条边添加到MST中，森林中的树数将减少一棵。假设需要提取k个超像素，我们通过第一个n-k条边连接顶点，并且有k个连通的分量，这些分量就是超级像素。

边缘收缩如图3所示。在图3（a）的每个顶点，一个数字表示属性（例如，像素强度）。每个边权重由属性在两端的绝对距离计算。在顶点4和顶点2之间执行边收缩。在图3中，用一个平行的边代替一个顶点（在图3中，用一个平行的边代替一个顶点，然后用图3中的一个边代替边）。

Boruvka算法可以直接应用于超像素分割。然而，直接应用该算法并不能产生令人满意的结果（见第四节）。这些问题源于贪婪的局部算法设计。回想一下（1）测量两棵树之间的距离作为最小边权重。这种度量对异常值很敏感，因为对于每棵树，只使用一个顶点的属性。除了线性时间复杂度外，Boruvka算法的另一个优点是它可以在一个统一的框架内合并邻域信息。由于我们在每次迭代后都会得到新的簇，所以很自然地会聚集每个簇的属性并更新连接到其他簇的权重。图3（d）说明了这一过程。合并顶点4和顶点2后，将形成一个平均值为3的超顶点。将删除自循环，并将平行边替换为一条边。同时，根据聚集属性（红线）的距离更新连接到超顶点的所有边的权重。特征聚合利用了“群体智慧”，而不是只利用两个顶点，这样可以获得更好的性能。

\section{基于超像素的快速FCM}
由于Boruvka算法依赖于图像的局部特征，而FCM依赖于全局特征，因此Boruvka算法和FCM的结合能够提高图像分割的效果。在这一部分中，我们提出了一种基于超像素的快速FCM算法，它将自适应的局部空间信息引入FCM的目标函数中。
\begin{equation}
J_{m} = \sum_{l=1}^{q}\sum_{k=1}^{c}S_{l}u_{kl}^{m} \left \| (\frac{1}{S_{l}}\sum_{p\in R_{l}}x_{p})-v_{k} \right \|^{2}
\end{equation}
其中，$l$是颜色级别，$1\leq l\leq q$，$q$是超像素图像的区域数量，即超像素数量，$S_{l}$是第$l$区域的像素数，$u_{kl}$ 表示颜色级别$l$相对于第$k$个聚类中心$v_{k}$的模糊隶属度，$m$为加权指数。$x_{p}$是超像素图像中第$l$区域内的颜色像素。由于原始图像中的每个颜色像素被超像素图像对应区域内的颜色像素的平均值所代替，所以颜色级别的数量相当于超级像素图像中的区域数量。因此，$l\ll N$，计算复杂度被有效地降低。

利用拉格朗日乘数法，将上述优化问题转化为一个无约束优化问题，该优化问题的目标函数为：
\begin{equation}\label{eqn:sim}
\widetilde{J_{m}} = \sum_{l=1}^{q}\sum_{k=1}^{c}S_{l}u_{kl}^{m} \left \| (\frac{1}{S_{l}}\sum_{p\in R_{l}}x_{p})-v_{k} \right \|^{2} - \lambda (\sum_{k=1}^{c}u_{kl}-1),
\end{equation}

\begin{equation}
\begin{split}
\frac{\partial \widetilde{J_m}}{\partial u_{kl}}
&= \sum_{l=1}^{q}\sum_{k=1}^{c}\frac{\partial \sum_{l=1}^{q}\sum_{k=1}^{c}S_{l}u_{kl}^{m} \left \| (\frac{1}{S_{l}}\sum_{p\in R_{l}}x_{p})-v_{k} \right \|^{2}}{\partial u_{kl}}-\lambda \\
&= \sum_{l=1}^{q}\sum_{k=1}^{c}mS_{l}u_{m-1}^{kl}\left \| (\frac{1}{S_{l}}\sum_{p\in R_{l}}x_{p})-v_{k}  \right \|^{2} \\
&= 0
\end{split}
\end{equation}

\begin{equation}
\begin{split}
\frac{\partial \widetilde{J_m}}{\partial v_{k}}
&= \sum_{l=1}^{q}\sum_{k=1}^{c}\frac{\partial \sum_{l=1}^{q}\sum_{k=1}^{c}S_{l}u_{kl}^{m} \left \| (\frac{1}{S_{l}}\sum_{p\in R_{l}}x_{p})-v_{k} \right \|^{2}}{\partial v_{k}}  \\
&= \sum_{l=1}^{q}\sum_{k=1}^{c}S_{l}u_{m}^{kl}\frac{\partial \left \| (\frac{1}{S_{l}}\sum_{p\in R_{l}}x_{p})-v_{k}  \right \|^{2} }{\partial v_{k}} \\
&= \sum_{l=1}^{q} S_{l}u_{m}^{kl}\frac{\partial \left \| (\frac{1}{S_{l}}\sum_{p\in R_{l}}x_{p})-v_{k}  \right \|^{2} }{\partial v_{k}} \\
&= -2 \sum_{l=1}^{q} S_{l}u_{m}^{kl} \left \| (\frac{1}{S_{l}}\sum_{p\in R_{l}}x_{p})-v_{k} \right \| \\
&= 0
\end{split}
\end{equation}


\begin{equation}
v_{k} = \frac{\sum_{l=1}^{q} u_{kl}^{m} \sum_{p\in R_{l}} x_{p}}{\sum_{l=1}^{q} S_{l} u_{kl}^{m}}
\end{equation}

\begin{equation}
u_{kl} = \frac{ \left \| (\frac{1}{S_{l}}\sum_{p\in R_{l}}x_{p})-v_{k} \right \|^{-2/(m-1)} }
{ \sum_{j=1}^{c} \left \| (\frac{1}{S_{l}}\sum_{p\in R_{l}}x_{p})-v_{j} \right \|^{-2/(m-1)}}
\end{equation}
其中$s_{ij}$的范围是$[0,1]$。$s_{ij}$值越大，超像素$i$和$j$的相似性越高。当$v_{i}$和$v_{j}$非常相似时，$s_{ij}$接近1，相反，当$v_{i}$和$v_{j}$极为不同时，它接近于0。我们根据相似度$s_{ij}$决定是否合并超像素$i$和$j$。

